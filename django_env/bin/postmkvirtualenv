# Check to see if the user wants to install a Django environment
echo -n "Is this a Django-enviroment your creating (y/n)? "
read -e IS_DJANGO_ENV

if [ $IS_DJANGO_ENV == "n" ]; then
	exit 0
fi

# setup the Django project directory and ask question about the Django project
PROJECT_NAME=`basename $VIRTUAL_ENV`

PARENT_DIR_NAME="$PROJECT_NAME.com"
echo -n "Containing directory for your Django project? [Default: $PARENT_DIR_NAME] "
read -e PARENT_DIR_NAME_INPUT
if [ -n "$PARENT_DIR_NAME_INPUT" ]; then
	PARENT_DIR_NAME=$PARENT_DIR_NAME_INPUT
fi

echo -n "Development server address? [Default: 127.0.0.1] "
read -e SERVER_ADDR_INPUT

echo -n "Development server address? [Default: 8000] "
read -e SERVER_PORT_INPUT

echo -n "Create a blank Fabric fabfile in your project (y/n)? "
read -e CREATE_FABFILE

# install Django
pip install /Users/oconnor/code/git/django-environment/Django-1.1.1.tar.gz

# Setup the Django project
DJANGO_ENV_PROJECT_DIR="$DJANGO_SITES_ROOT/$PARENT_DIR_NAME"
mkdir "$DJANGO_ENV_PROJECT_DIR"
cd "$DJANGO_ENV_PROJECT_DIR"
django-admin.py startproject $PROJECT_NAME

cd "$DJANGO_ENV_PROJECT_DIR/$PROJECT_NAME"
mkdir config
mv *.py config/
touch __init__.py
cd config/
touch __init__.py


# Setup the local_settings.py
LOCAL_SETTINGS=`cat $WORKON_HOME/django_env/config/local_settings_template.txt`
echo "$LOCAL_SETTINGS" > local_settings.py

perl -i -wpe "s|{{ PROJECT_DIR }}|$DJANGO_ENV_PROJECT_DIR|g" local_settings.py
perl -i -wpe "s/{{ SETTINGS_MODULE }}/$PROJECT_NAME\.config\.settings/g" local_settings.py
if [ -n "$SERVER_ADDR_INPUT" ]; then
	perl -i -wpe "s/127\.0\.0\.1/$SERVER_ADDR_INPUT/g" local_settings.py
	perl -i -wpe "s/# DJANGO_ENV_SERVER_ADDR/DJANGO_ENV_SERVER_ADDR  /g" local_settings.py
fi
if [ -n "$SERVER_PORT_INPUT" ]; then
	perl -i -wpe "s/8000/$SERVER_PORT_INPUT/g" local_settings.py
	perl -i -wpe "s/# DJANGO_ENV_SERVER_PORT/DJANGO_ENV_SERVER_PORT  /g" local_settings.py
fi
FABFILE_LOCATION="$DJANGO_ENV_PROJECT_DIR/$PROJECT_NAME/config/fabfile.py"
perl -i -wpe "s|{{ FABFILE }}|$FABFILE_LOCATION|g" local_settings.py
if [ $CREATE_FABFILE == "y" ]; then
	perl -i -wpe "s/# DJANGO_ENV_FABFILE/DJANGO_ENV_FABFILE  /g" local_settings.py
	FABFILE=`cat $WORKON_HOME/django_env/config/empty_fabfile.txt`
	echo "$FABFILE" > $FABFILE_LOCATION
fi

# Add the import for local_settings to settings.py
SETTINGS=`cat settings.py`
SETTINGS='from '$PROJECT_NAME'.config import local_settings

'$SETTINGS

echo "$SETTINGS" > settings.py

# symlink all bin files
ln -s $WORKON_HOME/django_env/bin/runserver $VIRTUAL_ENV/bin/runserver
ln -s $WORKON_HOME/django_env/utils/django_settings.py $VIRTUAL_ENV/bin/django_settings.py

# add the postactivate and postdeactivate hooks
echo '

source $WORKON_HOME/django_env/bin/postactivate

' >> "$VIRTUAL_ENV/bin/postactivate"
echo '

source $WORKON_HOME/django_env/bin/postdeactivate

' >> "$VIRTUAL_ENV/bin/postdeactivate"

# fix the ROOT_URLCONF setting
perl -i -wpe "s/"$PROJECT_NAME"\.urls/"$PROJECT_NAME"\.config.urls/g" "$DJANGO_ENV_PROJECT_DIR/$PROJECT_NAME/config/settings.py"

# add all paths to the PYTHONPATH
add2virtualenv $DJANGO_ENV_PROJECT_DIR

# source the Django-environment postactivate script
source "$WORKON_HOME/django_env/bin/postactivate"
